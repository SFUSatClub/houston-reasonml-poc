// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Store$HoustonPocReasonml = require("../store/Store.bs.js");

function create(store) {
  return /* record */[
          /* timers */[/* [] */0],
          /* store */store
        ];
}

function createTimers(store, commands) {
  var aux = function (commands, acc) {
    if (commands) {
      var cmd = commands[0];
      var epoch = acc + cmd.wait | 0;
      return /* :: */[
              setTimeout((function () {
                      var id = cmd.id;
                      return Store$HoustonPocReasonml.dispatch(store, /* UplinkSend */Block.__(1, [id]));
                    }), epoch),
              /* :: */[
                setTimeout((function () {
                        var id = cmd.id;
                        return Store$HoustonPocReasonml.dispatch(store, /* UplinkTimeout */Block.__(3, [id]));
                      }), epoch + cmd.timeout | 0),
                aux(commands[1], acc + epoch | 0)
              ]
            ];
    } else {
      return /* [] */0;
    }
  };
  return aux(commands, 0);
}

function start(param, sequence) {
  var store = param[/* store */1];
  var uplinkState = Store$HoustonPocReasonml.getState(store)[/* uplink */0];
  var match = uplinkState[/* inProgress */5];
  if (match) {
    return /* () */0;
  } else {
    Store$HoustonPocReasonml.dispatch(store, /* UplinkStart */Block.__(0, [sequence]));
    param[/* timers */0][0] = createTimers(store, sequence.commands);
    return /* () */0;
  }
}

function stop(uplink) {
  List.iter((function (prim) {
          clearTimeout(prim);
          return /* () */0;
        }), uplink[/* timers */0][0]);
  uplink[/* timers */0][0] = /* [] */0;
  return /* () */0;
}

exports.create = create;
exports.start = start;
exports.stop = stop;
/* No side effect */

type Query {
  info: String!
  commandSequence(id: ID!): CommandSequence
}

type Mutation {
  createCommandSequence(sequence: CommandSequenceInput!): CommandSequence!
  executeCommandSequence(id: ID!): Boolean!
}

type Subscription {
  state: State!
}

input CommandSequenceInput {
  name: String!
  description: String!
  commands: [CommandInput!]!
}

input CommandInput {
  name: String!
  timeout: Int!
  wait: Int!
  arguments: [CommandArgumentInput!]!
}

input CommandArgumentInput {
  name: String!
  value: String!
}

type CommandSequence {
  id: ID!
  name: String!
  description: String!
  commands: [Command!]!
}

type Command {
  id: ID!
  name: String!
  timeout: Int!
  wait: Int!
  arguments: [CommandArgument!]!
}

type CommandArgument {
  id: ID!
  name: String!
  value: String!
}

type UplinkState {
  inProgress: Boolean!
  sequenceId: ID
  pending: [ID!]!
  unresolved: [ID!]!
  successful: [ID!]!
  failed: [ID!]!
}

type State {
  uplink: UplinkState!
}
